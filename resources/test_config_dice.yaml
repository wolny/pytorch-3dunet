# path to the checkpoint file containing the model
model_path: 3dunet/best_checkpoint.pytorch
# model configuration
model:
  # model class
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
# predictor configuration
predictor:
  # standard in memory predictor
  name: 'StandardPredictor'
# specify the test datasets
loaders:
  # mirror pad the raw data for sharper prediction near the boundaries of the volume
  mirror_padding: true
  pad_width: 20
  # path to the raw data within the H5
  raw_internal_path: raw
  # how many subprocesses to use for data loading
  num_workers: 8
  test:
    # paths to the test datasets
    dir_path: 'resources/label3d'

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [64, 128, 128]
      # train stride between patches
      stride_shape: [32, 100, 100]

    transformer:
        raw:
          - name: Standardize
          - name: ToTensor
            expand_dims: true