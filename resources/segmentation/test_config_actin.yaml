# path to the checkpoint file containing the model
model_path: "/net/fs01/work01/yasuda/data/myosin_MeanIOU/best_checkpoint.pytorch"
# model configuration
model:
  # model class
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# predictor configuration
predictor:
  # standard in memory predictor
  name: 'StandardPredictor'
# specify the test datasets
loaders:
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # mirror pad the raw data in each axis for sharper prediction near the boundaries of the volume
  mirror_padding: [16, 32, 32]
  # path to the raw data within the H5
  raw_internal_path: raw
  # how many subprocesses to use for data loading
  num_workers: 8
  # path to the directory where the predictions from the network will be saved (optional: if not provided the TEST_SET directory will be used)
  output_dir: "/net/fs01/work01/yasuda/data/aplit_actin/0122/predictions"
  test:
    # paths to the test datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - "/net/fs01/work01/yasuda/data/actin/test/"
    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [64, 128, 128]
      # train stride between patches
      stride_shape: [32, 100, 100]

    transformer:
        raw:
          - name: Standardize
          - name: ToTensor
            expand_dims: true
<<<<<<< HEAD
=======
<<<<<<< HEAD:resources/seg_myosin/test_config_myosin.yaml

=======
>>>>>>> refs/remotes/origin/master:resources/segmentation/test_config_actin.yaml
>>>>>>> refs/remotes/origin/master
